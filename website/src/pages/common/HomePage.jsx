import { MainLayout } from '../../components/layout';
import { Link } from 'react-router-dom';
import { useState, useEffect } from 'react';
import { phishingApi } from '../../apis';
import { Button, Loader, ProgressCircle } from '../../components/common';
import { Helmet, HelmetProvider } from 'react-helmet-async';
import ReCAPTCHA from 'react-google-recaptcha';

function HomePage() {
  const siteKey = import.meta.env.PD_CAPCHA_SITE_KEY;
  const [urlInput, setUrlInput] = useState('');
  const [phishingMessage, setPhishingMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const [phishingProbability, setPhishingProbability] = useState(-1);
  const [loading, setLoading] = useState(false);
  const [submitCount, setSubmitCount] = useState(0);
  const [showCaptcha, setShowCaptcha] = useState(false);
  const [captchaVerified, setCaptchaVerified] = useState(false);
  const [captchaExpired, setCaptchaExpired] = useState(false);

  const handleCheckPhishing = async (e) => {
    e.preventDefault();

    if (showCaptcha) {
      setShowCaptcha(false);
      setCaptchaVerified(false);
      sessionStorage.setItem('submitCount', '0');
      setSubmitCount(0);
    } else {
      if (submitCount >= 2 && !captchaVerified) {
        setShowCaptcha(true);
        return;
      }
      const newCount = submitCount + 1;
      sessionStorage.setItem('submitCount', newCount.toString());
      setSubmitCount(newCount);
    }
    setPhishingMessage('');
    setErrorMessage('');
    setLoading(true);
    try {
      const data = await phishingApi.predict({ url: urlInput });
      const probability = data.phishing_probability;
      setPhishingProbability(probability);
      if (probability > 0.75) {
        setPhishingMessage('Trang web ki·ªÉm tra c√≥ nguy c∆° l·ª´a ƒë·∫£o cao. H√£y c·∫©n th·∫≠n khi truy c·∫≠p.');
      } else if (probability > 0.5) {
        setPhishingMessage(
          'Trang web ki·ªÉm tra c√≥ kh·∫£ nƒÉng l√† l·ª´a ƒë·∫£o. H√£y ch√∫ √Ω tr∆∞·ªõc khi cung c·∫•p b·∫•t k·ª≥ th√¥ng tin nh·∫°y c·∫£m n√†o.'
        );
      } else if (probability > 0.25) {
        setPhishingMessage('Trang web ki·ªÉm tra c√≥ kh·∫£ nƒÉng l√† an to√†n.');
      } else if (probability >= 0) {
        setPhishingMessage('Trang web ki·ªÉm tra c√≥ ƒë·ªô an to√†n cao.');
      } else {
        setPhishingMessage(
          'Kh√¥ng x√°c ƒë·ªãnh do trang web t·ª´ URL b·∫°n nh·∫≠p v√†o c√≥ th·ªÉ kh√¥ng c√≥ ƒë·ªãnh d·∫°ng text/html.'
        );
      }
      setLoading(false);
    } catch (error) {
      setPhishingProbability(-1);
      setLoading(false);
      if (error.status === 400) {
        setErrorMessage(
          'URL sai ho·∫∑c trang web kh√¥ng th·ªÉ truy c·∫≠p ho·∫∑c trang web kh√¥ng c√≤n t·ªìn t·∫°i.'
        );
      } else if (error.status === 408) {
        setErrorMessage('M·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ truy c·∫≠p v√†o URL.');
      } else {
        setErrorMessage('C√≥ l·ªói g√¨ ƒë√≥ x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  const handleCaptchaChange = (value) => {
    if (value) {
      setCaptchaVerified(true);
      setCaptchaExpired(false);
    }
  };

  const handleCaptchaExpired = () => {
    setCaptchaVerified(false);
    setCaptchaExpired(true);
  };

  useEffect(() => {
    const count = parseInt(sessionStorage.getItem('submitCount')) || 0;
    setSubmitCount(count);
  }, []);

  return (
    <HelmetProvider>
      <MainLayout>
        <Helmet>
          <title>PhishDetect.net - C√¥ng c·ª• ph√°t hi·ªán trang web l·ª´a ƒë·∫£o</title>
          <meta
            name="description"
            content="PhishDetect.net gi√∫p b·∫°n ki·ªÉm tra v√† b·∫£o v·ªá kh·ªèi c√°c trang web l·ª´a ƒë·∫£o b·∫±ng c√°ch s·ª≠ d·ª•ng c√¥ng ngh·ªá AI ti√™n ti·∫øn."
          />
          <meta name="robots" content="index, follow" />
          <meta
            name="keywords"
            content="phishing, l·ª´a ƒë·∫£o, b·∫£o m·∫≠t, ph√°t hi·ªán l·ª´a ƒë·∫£o, ph√°t hi·ªán phishing, c·∫£nh b√°o l·ª´a ƒë·∫£o, c·∫£nh b√°o phishing, ki·ªÉm tra trang web an to√†n"
          />
          <meta
            property="og:title"
            content="PhishDetect.net - C√¥ng c·ª• ph√°t hi·ªán trang web l·ª´a ƒë·∫£o"
          />
          <meta
            property="og:description"
            content="Ph√°t hi·ªán v√† c·∫£nh b√°o ng∆∞·ªùi d√πng v·ªÅ c√°c trang web l·ª´a ƒë·∫£o ti·ªÅm ·∫©n v·ªõi c√¥ng ngh·ªá ph√°t hi·ªán ti√™n ti·∫øn."
          />
          <meta property="og:image" content="https://phishdetect.net/phish_detect.png" />
          <meta property="og:url" content="https://phishdetect.net/" />
          <meta property="og:type" content="website" />
        </Helmet>
        <div className="py-8 sm:py-6">
          <div className="container px-5 sm:px-4">
            <h1 className="text-3xl sm:text-2xl text-primary font-bold text-center mb-3 animate-appear">
              Ph√°t hi·ªán trang web l·ª´a ƒë·∫£o
            </h1>
            <p className="mb-5">
              L∆∞u √Ω: C√¥ng c·ª• c·ªßa ch√∫ng t√¥i ch·ªâ ƒë∆∞a ra d·ª± ƒëo√°n v·ªÅ kh·∫£ nƒÉng m·ªôt trang web c√≥ ph·∫£i l√†
              l·ª´a ƒë·∫£o hay kh√¥ng nh·∫±m c·∫£nh b√°o s·ªõm cho ng∆∞·ªùi d√πng m√† ch∆∞a ƒë∆∞·ª£c x√°c minh m·ªôt c√°ch
              ch√≠nh th·ª©c. ƒê·ªÉ bi·∫øt th√™m chi ti·∫øt h√£y xem ƒë·∫ßy ƒë·ªß{' '}
              <Link className="text-secondary hover:underline" to="/terms">
                ƒëi·ªÅu kho·∫£n
              </Link>{' '}
              v√†{' '}
              <Link className="text-secondary hover:underline" to="/policy">
                ch√≠nh s√°ch
              </Link>{' '}
              c·ªßa ch√∫ng t√¥i.
            </p>
            <div className="flex justify-center mb-5">
              <form
                onSubmit={handleCheckPhishing}
                className="w-[600px] max-w-full flex space-x-3 sm:space-x-0 sm:space-y-4 sm:flex-col"
              >
                <input
                  className={`flex-1 outline-none border border-tertiary px-4 py-2 rounded-lg focus:border-secondary transition-all${
                    loading ? ' cursor-not-allowed' : ''
                  }`}
                  type="text"
                  placeholder="Nh·∫≠p URL mu·ªën ki·ªÉm tra..."
                  value={urlInput}
                  onChange={(e) => setUrlInput(e.target.value)}
                  disabled={loading}
                  name="url"
                />
                <Button
                  title="Ki·ªÉm tra"
                  type="submit"
                  isDisable={
                    !urlInput.trim() ||
                    loading ||
                    (showCaptcha && (!captchaVerified || captchaExpired))
                  }
                />
              </form>
            </div>
            {showCaptcha && (
              <div className="flex justify-center mb-5">
                <ReCAPTCHA
                  sitekey={siteKey}
                  onChange={handleCaptchaChange}
                  onExpired={handleCaptchaExpired}
                />
              </div>
            )}
            <div>
              {!loading ? (
                <>
                  <ProgressCircle percentage={Math.round(phishingProbability * 100)} />
                  {phishingMessage && (
                    <div className="mt-4 flex justify-center">
                      <p className="text-center px-4 py-2 bg-primary/10 border-l-4 border-primary text-primary font-medium shadow-md rounded-md transition-transform duration-300 ease-in-out transform hover:scale-105">
                        <span role="img" aria-label="Info" className="mr-2">
                          ‚ÑπÔ∏è
                        </span>
                        {phishingMessage}
                      </p>
                    </div>
                  )}

                  {errorMessage && (
                    <div className="mt-4 flex justify-center">
                      <p className="text-center px-4 py-2 bg-red-100 border-l-4 border-red-500 text-red-500 font-medium shadow-md rounded-md transition-transform duration-300 ease-in-out transform hover:scale-105">
                        <span role="img" aria-label="Error" className="mr-2">
                          üö´
                        </span>
                        {errorMessage}
                      </p>
                    </div>
                  )}
                </>
              ) : (
                <Loader />
              )}
            </div>
          </div>
        </div>
      </MainLayout>
    </HelmetProvider>
  );
}

export default HomePage;
